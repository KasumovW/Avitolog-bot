const { Bot, InlineKeyboard } = require("grammy");
require("dotenv").config();

const bot = new Bot(process.env.BOT_API_KEY);

const userSessions = new Map();

bot.command("start", async (ctx) => {
	const keyboard = new InlineKeyboard()
		.url("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "https://t.me/z_web")
		.row()
		.text("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", "how_it_works")
		.row()
		.text("–û –Ω–∞—Å", "about_us")
		.row()
		.text("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", "daily_gift")
		.row()
		.text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "create_task");

	await ctx.reply(
		"ü§ñ <b>–°–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –Ω–∞—à–∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ–≤–µ—Ä—à–∞—é—Ç –Ω–∞–∫—Ä—É—Ç–∫—É.</b>\n\n" +
			"<b>–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π:</b> –í—ã–±–∏—Ä–∞–µ—Ç –≥–æ—Ä–æ–¥, –≤–≤–æ–¥–∏—Ç –ø–æ–∏—Å–∫–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å, –∏—â–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (–≥–ª—É–±–æ–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä), " +
			"–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Ç–µ–∫—Å—Ç, –∫–∞—Ä—Ç—É (–ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä), –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–≥–ª—É–±–æ–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä), " +
			"–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç (–≥–ª—É–±–æ–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä). <i>–û–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ ‚Äî 2 –º–∏–Ω—É—Ç—ã.</i> " +
			"–ú—ã —Å–ª–µ–¥–∏–º –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –Ω–∞–∫—Ä—É—Ç–∫–∞ –≤—ã–≥–ª—è–¥–µ–ª–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞–ª–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n\n" +
			"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å 1 –ü–§: 7 —Ä—É–±.</b>\n\n" +
			"–ò—Ç–∞–∫, –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞—á—É, –¥–∞–ª–µ–µ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤–∞–º –ø—Ä–æ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ –Ω–∞–∫—Ä—É—Ç–∫–µ.",
		{ parse_mode: "HTML", reply_markup: keyboard }
	);
});

bot.callbackQuery("to_menu", async (ctx) => {
	const keyboard = new InlineKeyboard()
		.url("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "https://t.me/z_web")
		.row()
		.text("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", "how_it_works")
		.row()
		.text("–û –Ω–∞—Å", "about_us")
		.row()
		.text("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫", "daily_gift")
		.row()
		.text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "create_task");

	await ctx.answerCallbackQuery();

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º reply, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
	await ctx.reply("ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>\n\n" + "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
		parse_mode: "HTML",
		reply_markup: keyboard,
	});
});

bot.callbackQuery("how_it_works", async (ctx) => {
	const keyboard = new InlineKeyboard()
		.url("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "https://t.me/z_web")
		.row()
		.text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "create_task")
		.row()
		.text("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "to_menu");

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
	await ctx.answerCallbackQuery();

	await ctx.editMessageText(
		"<b>–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π:</b>\n" +
			'1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"\n' +
			"2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã\n" +
			"3. –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n" +
			"4. –í—ã—Å—Ç–∞–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–§\n" +
			"5. –í—ã—Å—Ç–∞–≤–∏—Ç–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞\n" +
			"6. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–∞—É–∑—ã\n" +
			"7. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞\n" +
			"8. –í—ã—Å—Ç–∞–≤–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã –∑–∞–¥–∞—á–∏\n" +
			"9. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–¥–∞—á—É\n" +
			"10. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É!",
		{ parse_mode: "HTML", reply_markup: keyboard }
	);
});

bot.callbackQuery("about_us", async (ctx) => {
	const keyboard = new InlineKeyboard()
		.url("–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", "https://t.me/z_web")
		.row()
		.url("–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", "https://t.me/z_web")
		.row()
		.url("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", "https://t.me/z_web")
		.row()
		.text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "create_task")
		.row()
		.text("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "to_menu");

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
	await ctx.answerCallbackQuery();

	await ctx.reply(
		"ü§ñ <b>–ö—Ç–æ –º—ã?</b>\n\n" +
			"–ú—ã - –∫–æ–º–∞–Ω–¥–∞ <b>Avitolog</b>, —Å–æ–∑–¥–∞–≤—à–∞—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è Telegram, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ Avito, –∂–µ–ª–∞—é—â–∏—Ö –º–∞–∫—Å–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å —Å–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ù–∞—à–∞ –º–∏—Å—Å–∏—è - –æ–±–µ—Å–ø–µ—á–∏—Ç—å –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥—Ä—É–≥–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —É–≤–µ–ª–∏—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏, –∫–∞–∫ —Å–ª–µ–¥—Å—Ç–≤–∏–µ, –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–¥–∞–∂–∏, –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ —Ä–µ–∫–ª–∞–º—É.\n\n" +
			"<b>–ó–∞—á–µ–º –º—ã —ç—Ç–æ –¥–µ–ª–∞–µ–º?</b>\n\n" +
			"–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, –∫–∞–∫ —Ç—Ä—É–¥–Ω–æ –ø—Ä–æ–±–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —à—É–º –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö –ø–æ–¥–æ–±–Ω—ã—Ö Avito, –≥–¥–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –¥–µ—Å—è—Ç–∫–∏ —Ç—ã—Å—è—á –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ù–∞—à–∞ —Ü–µ–ª—å - —É–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ –ø–æ–¥–Ω—è—Ç–∏—é –≤ –ø–æ–∏—Å–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–¥–µ–ª–∏—Ç—å—Å—è —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ –ª—é–±–æ–π –Ω–∏—à–µ.\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø—Ä–æ–¥–∞–≤—Ü—ã –º–æ–≥—É—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω–æ - –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ —Å–≤–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –º—ã –∑–∞–±–æ—Ç–∏–º—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –≤–∞—Å –≤–∏–¥–µ–ª–∏.\n\n" +
			"<b>–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º?</b>\n\n" +
			"–ù–∞—à–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–º–æ–≥–ª–∏ –Ω–∞–º —Å–æ–∑–¥–∞—Ç—å —Å–∞–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è - <b>–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç–æ—Ä</b>, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Ö —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n" +
			"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–§ –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –µ–≥–æ –≤—ã–¥–∞—á—É –≤ –ø–æ–∏—Å–∫–µ, –∞ –º—ã –¥–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã <b>–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –≤—Å–µ–≥–¥–∞ —Å–∫–ª–∞–¥—ã–≤–∞–ª–∞—Å—å</b> –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ—Ä–æ–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç <b>–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –∞–ª–≥–æ—Ä–∏—Ç–º</b> –∏ –±–µ–∑ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.\n\n" +
			"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ –¥–∞–π—Ç–µ –≤–∞—à–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –Ω–∞ Avito –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∏ –∑–∞—Å–ª—É–∂–∏–≤–∞—é—Ç!",
		{ parse_mode: "HTML", reply_markup: keyboard }
	);
});

bot.callbackQuery("daily_gift", async (ctx) => {
	const keyboard = new InlineKeyboard().text("–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "to_menu");

	await ctx.answerCallbackQuery();
	await ctx.reply("üéÅ <b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –ø–æ–¥–∞—Ä–æ–∫:</b> 10 –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –≤–∞—à —Å—á–µ—Ç!", {
		parse_mode: "HTML",
		reply_markup: keyboard,
	});
});

bot.callbackQuery("create_task", async (ctx) => {
	await ctx.answerCallbackQuery();
	const keyboard = new InlineKeyboard();
	for (let i = 1; i <= 10; i++) {
		keyboard.text(`${i}`, `set_links_${i}`);
		if (i % 5 === 0) keyboard.row();
	}
	await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (1-10):", {
		reply_markup: keyboard,
	});
});

bot.callbackQuery(/^set_links_(\d+)$/, async (ctx) => {
	const count = parseInt(ctx.match[1], 10);
	userSessions.set(ctx.chat.id, { linksCount: count, links: [], pause: null });
	await ctx.answerCallbackQuery();
	await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ ${count} —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–π –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏):`);
});

bot.on("message:text", async (ctx) => {
	const session = userSessions.get(ctx.chat.id);
	if (!session) return;

	if (!isNaN(ctx.message.text.trim())) {
		session.pause = parseInt(ctx.message.text.trim(), 10);
		userSessions.set(ctx.chat.id, session);
		await ctx.reply(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞—É–∑–∞: ${session.pause} –º–∏–Ω—É—Ç.`);
		return;
	}

	if (session.links.length >= session.linksCount) return;

	session.links.push(ctx.message.text.trim());
	userSessions.set(ctx.chat.id, session);

	if (session.links.length < session.linksCount) {
		await ctx.reply(`–ü—Ä–∏–Ω—è—Ç–æ ${session.links.length}/${session.linksCount}. –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É:`);
	} else {
		const pfKeyboard = new InlineKeyboard().text("30", "set_pf_30").text("40", "set_pf_40").row().text("50", "set_pf_50").text("100", "set_pf_100");

		await ctx.reply(`‚úÖ –í—Å–µ ${session.linksCount} —Å—Å—ã–ª–æ–∫ –ø—Ä–∏–Ω—è—Ç—ã. –ó–∞–¥–∞—á–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–§ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:`, {
			reply_markup: pfKeyboard,
		});
	}
});

bot.callbackQuery(/^set_pf_(\d+)$/, async (ctx) => {
	await ctx.answerCallbackQuery();
	const timeKeyboard = new InlineKeyboard()
		.text("–°–µ–π—á–∞—Å", "set_time_now")
		.row()
		.text("00:00", "set_time_00")
		.text("6:00", "set_time_06")
		.row()
		.text("9:00", "set_time_09")
		.text("12:00", "set_time_12")
		.row()
		.text("16:00", "set_time_16")
		.text("18:00", "set_time_18");

	await ctx.reply("ü§ñ–°—Ç–∞—Ä—Ç—É–µ–º! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä 8:00, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.\n\n–°–æ–≤–µ—Ç! –ù–∞–∫—Ä—É—á–∏–≤–∞–π—Ç–µ –ü–§ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è, –Ω–∞—á–Ω–∏—Ç–µ —Å 6:00.", {
		reply_markup: timeKeyboard,
	});
});

bot.callbackQuery(/^set_time_.*$/, async (ctx) => {
	await ctx.answerCallbackQuery();
	const pauseKeyboard = new InlineKeyboard().text("–ë–µ–∑ –ø–∞—É–∑—ã", "set_pause_none").row().text("–ê–≤—Ç–æ", "set_pause_auto");

	await ctx.reply(
		"ü§ñ–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –ø–∞—É–∑—ã –º–µ–∂–¥—É –ü–§, –≤ –º–∏–Ω—É—Ç–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä 20, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ'. –Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤—Ä–µ–º—è –ø–∞—É–∑—ã –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è (21:00).\n\n" +
			"–ü—Ä–∏–º–µ—Ä: –ï—Å–ª–∏ –í—ã –∑–∞–∫–∞–∑–∞–ª–∏ 50 –ü–§ –∏ –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ 6:00, —Ç–æ–≥–¥–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ê–≤—Ç–æ' –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –±—É–¥—É—Ç –Ω–∞–∫—Ä—É—á–∏–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å, —Å 6:00 –¥–æ 21:00, —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º 15 –º–∏–Ω—É—Ç. " +
			"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –ª—É—á—à–µ –≤—Å–µ–≥–æ –∫—Ä—É—Ç–∏—Ç—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ, –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è.",
		{
			reply_markup: pauseKeyboard,
		}
	);
});

bot.callbackQuery("set_pause_auto", async (ctx) => {
	await ctx.answerCallbackQuery();

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	let session = userSessions.get(ctx.chat.id);

	// –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
	if (!session) {
		session = {};
	}

	session.pause = "–ê–≤—Ç–æ";
	userSessions.set(ctx.chat.id, session);

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞
	const dateKeyboard = new InlineKeyboard().text("–°–µ–≥–æ–¥–Ω—è", "set_date_today").text("–ó–∞–≤—Ç—Ä–∞", "set_date_tomorrow");

	await ctx.reply("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞:\n- –ù–∞–∂–º–∏—Ç–µ '–°–µ–≥–æ–¥–Ω—è' –∏–ª–∏ '–ó–∞–≤—Ç—Ä–∞', –ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.01.2024).", {
		reply_markup: dateKeyboard,
	});
});

bot.callbackQuery("set_date_today", async (ctx) => {
    await ctx.answerCallbackQuery();

    const today = new Date();
    const formattedDate = `${today.getDate()}.${today.getMonth() + 1}.${today.getFullYear()}`;

    let session = userSessions.get(ctx.chat.id);
    if (!session) {
        session = {};
    }

    session.startDate = formattedDate;
    userSessions.set(ctx.chat.id, session);

    // Send a message and offer the user to choose the number of days
    await ctx.reply(`‚úÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${formattedDate}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏:`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '1 –¥–µ–Ω—å', callback_data: 'set_days_1' }],
                [{ text: '3 –¥–Ω—è', callback_data: 'set_days_3' }],
                [{ text: '7 –¥–Ω–µ–π', callback_data: 'set_days_7' }],
                [{ text: '14 –¥–Ω–µ–π', callback_data: 'set_days_14' }],
                [{ text: '30 –¥–Ω–µ–π', callback_data: 'set_days_30' }]
            ]
        }
    });
});

bot.callbackQuery("set_date_tomorrow", async (ctx) => {
    await ctx.answerCallbackQuery();

    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const formattedDate = `${tomorrow.getDate()}.${tomorrow.getMonth() + 1}.${tomorrow.getFullYear()}`;

    let session = userSessions.get(ctx.chat.id);
    if (!session) {
        session = {};
    }

    session.startDate = formattedDate;
    userSessions.set(ctx.chat.id, session);

    // Send a message and offer the user to choose the number of days
    await ctx.reply(`‚úÖ –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${formattedDate}. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏:`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '1 –¥–µ–Ω—å', callback_data: 'set_days_1' }],
                [{ text: '3 –¥–Ω—è', callback_data: 'set_days_3' }],
                [{ text: '7 –¥–Ω–µ–π', callback_data: 'set_days_7' }],
                [{ text: '14 –¥–Ω–µ–π', callback_data: 'set_days_14' }],
                [{ text: '30 –¥–Ω–µ–π', callback_data: 'set_days_30' }]
            ]
        }
    });
});

// Handling day selection callback
bot.callbackQuery("set_days_1", async (ctx) => {
    await ctx.answerCallbackQuery();
    let session = userSessions.get(ctx.chat.id);
    if (!session) {
        session = {};
    }

    session.days = 1;
    userSessions.set(ctx.chat.id, session);
    await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 1 –¥–µ–Ω—å.`);
});

bot.callbackQuery("set_days_3", async (ctx) => {
    await ctx.answerCallbackQuery();
    let session = userSessions.get(ctx.chat.id);
    if (!session) {
        session = {};
    }

    session.days = 3;
    userSessions.set(ctx.chat.id, session);
    await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 3 –¥–Ω—è.`);
});

bot.callbackQuery("set_days_7", async (ctx) => {
    await ctx.answerCallbackQuery();
    let session = userSessions.get(ctx.chat.id);
    if (!session) {
        session = {};
    }

    session.days = 7;
    userSessions.set(ctx.chat.id, session);
    await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 7 –¥–Ω–µ–π.`);
});

bot.callbackQuery("set_days_14", async (ctx) => {
    await ctx.answerCallbackQuery();
    let session = userSessions.get(ctx.chat.id);
    if (!session) {
        session = {};
    }

    session.days = 14;
    userSessions.set(ctx.chat.id, session);
    await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 14 –¥–Ω–µ–π.`);
});

bot.callbackQuery("set_days_30", async (ctx) => {
    await ctx.answerCallbackQuery();
    let session = userSessions.get(ctx.chat.id);
    if (!session) {
        session = {};
    }

    session.days = 30;
    userSessions.set(ctx.chat.id, session);
    await ctx.reply(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∫—Ä—É—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 30 –¥–Ω–µ–π.`);
});


bot.catch((err) => {
	console.error("Global Error:", err);
	console.error("Error Context:", err.ctx?.update);
});

bot.start();
